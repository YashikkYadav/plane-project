# Plane Project Deployment Guide for VPS Server

## Prerequisites

### VPS Server Requirements:
- Minimum 4GB RAM (8GB+ recommended)
- 2+ CPU cores
- 50GB+ storage space
- Ubuntu 20.04+ or CentOS 8+
- Root or sudo access
- Domain name (optional but recommended)

### Local Requirements:
- Git repository with Plane project code
- SSH access to VPS server

## Step 1: Prepare Your VPS Server

### 1.1 Connect to VPS
```bash
ssh root@your-server-ip
# or
ssh username@your-server-ip
```

### 1.2 Update System
```bash
sudo apt update && sudo apt upgrade -y
# For CentOS: sudo yum update -y
```

### 1.3 Install Required Dependencies
```bash
# Install Node.js (v22.18.0+)
curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
sudo apt-get install -y nodejs

# Install Python 3.8+
sudo apt install python3 python3-pip python3-venv -y

# Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
sudo usermod -aG docker $USER

# Install Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Install Git
sudo apt install git -y

# Install pnpm
npm install -g pnpm

# Install Nginx (for reverse proxy)
sudo apt install nginx -y

# Install Certbot (for SSL certificates)
sudo apt install certbot python3-certbot-nginx -y
```

### 1.4 Configure Firewall
```bash
sudo ufw allow 22      # SSH
sudo ufw allow 80      # HTTP
sudo ufw allow 443     # HTTPS
sudo ufw enable
```

## Step 2: Clone and Setup Project

### 2.1 Create Application Directory
```bash
sudo mkdir -p /opt/plane
sudo chown $USER:$USER /opt/plane
cd /opt/plane
```

### 2.2 Clone Repository
```bash
git clone https://github.com/yourusername/plane.git .
# Replace with your actual GitHub repository URL
```

### 2.3 Set Up Environment Variables
```bash
# Copy environment files
cp .env.example .env

# Edit environment variables for production
nano .env
```

### 2.4 Key Environment Variables to Configure:
```env
# Database Configuration
POSTGRES_HOST=plane-db
POSTGRES_DB=plane
POSTGRES_USER=plane
POSTGRES_PASSWORD=your-secure-password

# Redis Configuration
REDIS_HOST=plane-redis
REDIS_PORT=6379

# Django Settings
DEBUG=False
SECRET_KEY=your-very-secure-secret-key
ALLOWED_HOSTS=your-domain.com,your-server-ip

# Email Configuration (optional)
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password

# File Storage (MinIO)
AWS_ACCESS_KEY_ID=minioadmin
AWS_SECRET_ACCESS_KEY=minioadmin
AWS_S3_ENDPOINT_URL=http://plane-minio:9000
AWS_S3_BUCKET_NAME=uploads

# Frontend URLs
NEXT_PUBLIC_API_BASE_URL=https://your-domain.com/api
```

## Step 3: Production Docker Configuration

### 3.1 Create Production Docker Compose File
```bash
nano docker-compose.prod.yml
```

### 3.2 Production Docker Compose Content:
```yaml
version: '3.8'

services:
  plane-db:
    image: postgres:15.7-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - plane_network

  plane-redis:
    image: valkey/valkey:7.2.5-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - plane_network

  plane-minio:
    image: minio/minio
    restart: unless-stopped
    command: server /data --console-address ":9090"
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - minio_data:/data
    networks:
      - plane_network

  plane-mq:
    image: rabbitmq:3.13.6-management-alpine
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: plane
      RABBITMQ_DEFAULT_PASS: plane
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - plane_network

  migrator:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile.api
    command: python manage.py migrate
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@plane-db:5432/${POSTGRES_DB}
      REDIS_URL: redis://plane-redis:6379/
    depends_on:
      - plane-db
      - plane-redis
    networks:
      - plane_network

  plane-api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile.api
    restart: unless-stopped
    command: gunicorn plane.wsgi:application --workers 4 --bind 0.0.0.0:8000
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@plane-db:5432/${POSTGRES_DB}
      REDIS_URL: redis://plane-redis:6379/
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
    depends_on:
      - plane-db
      - plane-redis
      - migrator
    ports:
      - "8000:8000"
    networks:
      - plane_network

  plane-worker:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile.api
    restart: unless-stopped
    command: celery -A plane worker -l info
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@plane-db:5432/${POSTGRES_DB}
      REDIS_URL: redis://plane-redis:6379/
    depends_on:
      - plane-db
      - plane-redis
    networks:
      - plane_network

  plane-beat-worker:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile.api
    restart: unless-stopped
    command: celery -A plane beat -l info
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@plane-db:5432/${POSTGRES_DB}
      REDIS_URL: redis://plane-redis:6379/
    depends_on:
      - plane-db
      - plane-redis
    networks:
      - plane_network

  plane-web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile.web
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
    ports:
      - "3000:3000"
    depends_on:
      - plane-api
    networks:
      - plane_network

  plane-space:
    build:
      context: .
      dockerfile: ./apps/space/Dockerfile.space
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
    ports:
      - "3002:3002"
    depends_on:
      - plane-api
    networks:
      - plane_network

  plane-admin:
    build:
      context: .
      dockerfile: ./apps/admin/Dockerfile.admin
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
    ports:
      - "3001:3001"
    depends_on:
      - plane-api
    networks:
      - plane_network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  rabbitmq_data:

networks:
  plane_network:
    driver: bridge
```

## Step 4: Create Dockerfiles for Frontend Applications

### 4.1 Web App Dockerfile
```bash
nano apps/web/Dockerfile.web
```

```dockerfile
FROM node:22-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json pnpm-lock.yaml* ./
COPY pnpm-workspace.yaml ./
COPY packages packages
COPY apps/web/package.json ./apps/web/
RUN npm install -g pnpm && pnpm install --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN npm install -g pnpm && pnpm build --filter=web

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/apps/web/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000

CMD ["node", "server.js"]
```

### 4.2 Space App Dockerfile
```bash
nano apps/space/Dockerfile.space
```

```dockerfile
FROM node:22-alpine AS base

FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json pnpm-lock.yaml* ./
COPY pnpm-workspace.yaml ./
COPY packages packages
COPY apps/space/package.json ./apps/space/
RUN npm install -g pnpm && pnpm install --frozen-lockfile

FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN npm install -g pnpm && pnpm build --filter=space

FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/apps/space/public ./public
RUN mkdir .next
RUN chown nextjs:nodejs .next

COPY --from=builder --chown=nextjs:nodejs /app/apps/space/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/space/.next/static ./.next/static

USER nextjs

EXPOSE 3002

ENV PORT 3002

CMD ["node", "server.js"]
```

### 4.3 Admin App Dockerfile
```bash
nano apps/admin/Dockerfile.admin
```

```dockerfile
FROM node:22-alpine AS base

FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json pnpm-lock.yaml* ./
COPY pnpm-workspace.yaml ./
COPY packages packages
COPY apps/admin/package.json ./apps/admin/
RUN npm install -g pnpm && pnpm install --frozen-lockfile

FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN npm install -g pnpm && pnpm build --filter=admin

FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/apps/admin/public ./public
RUN mkdir .next
RUN chown nextjs:nodejs .next

COPY --from=builder --chown=nextjs:nodejs /app/apps/admin/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/admin/.next/static ./.next/static

USER nextjs

EXPOSE 3001

ENV PORT 3001

CMD ["node", "server.js"]
```

### 4.4 API Dockerfile
```bash
nano apps/api/Dockerfile.api
```

```dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY apps/api/requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY apps/api .

# Create non-root user
RUN useradd --create-home --shell /bin/bash app
RUN chown -R app:app /app
USER app

EXPOSE 8000

CMD ["gunicorn", "plane.wsgi:application", "--workers", "4", "--bind", "0.0.0.0:8000"]
```

## Step 5: Configure Next.js for Production

### 5.1 Update Next.js Config Files
For each Next.js app (web, space, admin), update their `next.config.js`:

```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'standalone',
  reactStrictMode: true,
  swcMinify: true,
  experimental: {
    outputFileTracingRoot: path.join(__dirname, '../../'),
  },
}

module.exports = nextConfig
```

## Step 6: Build and Deploy

### 6.1 Build Docker Images
```bash
# Build all services
docker-compose -f docker-compose.prod.yml build

# Or build individually
docker-compose -f docker-compose.prod.yml build plane-api
docker-compose -f docker-compose.prod.yml build plane-web
docker-compose -f docker-compose.prod.yml build plane-space
docker-compose -f docker-compose.prod.yml build plane-admin
```

### 6.2 Start Services
```bash
# Start all services in background
docker-compose -f docker-compose.prod.yml up -d

# Check status
docker-compose -f docker-compose.prod.yml ps

# View logs
docker-compose -f docker-compose.prod.yml logs -f
```

## Step 7: Configure Nginx Reverse Proxy

### 7.1 Create Nginx Configuration
```bash
sudo nano /etc/nginx/sites-available/plane
```

```nginx
server {
    listen 80;
    server_name your-domain.com www.your-domain.com;

    # API Backend
    location /api/ {
        proxy_pass http://localhost:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Main Web App
    location / {
        proxy_pass http://localhost:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Admin App
    location /admin {
        proxy_pass http://localhost:3001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Space App
    location /space {
        proxy_pass http://localhost:3002;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
```

### 7.2 Enable Site
```bash
sudo ln -s /etc/nginx/sites-available/plane /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx
```

## Step 8: SSL Certificate Setup

### 8.1 Obtain SSL Certificate
```bash
sudo certbot --nginx -d your-domain.com -d www.your-domain.com
```

### 8.2 Auto-renewal Setup
```bash
sudo crontab -e
# Add this line:
0 12 * * * /usr/bin/certbot renew --quiet
```

## Step 9: System Service Setup

### 9.1 Create Systemd Service
```bash
sudo nano /etc/systemd/system/plane.service
```

```ini
[Unit]
Description=Plane Project Management
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/opt/plane
ExecStart=/usr/local/bin/docker-compose -f docker-compose.prod.yml up -d
ExecStop=/usr/local/bin/docker-compose -f docker-compose.prod.yml down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
```

### 9.2 Enable Service
```bash
sudo systemctl daemon-reload
sudo systemctl enable plane.service
sudo systemctl start plane.service
```

## Step 10: Monitoring and Maintenance

### 10.1 Log Management
```bash
# View application logs
docker-compose -f docker-compose.prod.yml logs -f plane-api
docker-compose -f docker-compose.prod.yml logs -f plane-web

# Setup log rotation
sudo nano /etc/logrotate.d/docker
```

### 10.2 Backup Strategy
```bash
# Create backup script
nano /opt/plane/backup.sh
```

```bash
#!/bin/bash
BACKUP_DIR="/opt/plane/backups"
DATE=$(date +%Y%m%d_%H%M%S)

mkdir -p $BACKUP_DIR

# Backup database
docker exec plane-plane-db-1 pg_dump -U $POSTGRES_USER $POSTGRES_DB > $BACKUP_DIR/db_backup_$DATE.sql

# Backup uploaded files
tar -czf $BACKUP_DIR/files_backup_$DATE.tar.gz -C /var/lib/docker/volumes/plane_minio_data/_data .

# Keep only last 7 days of backups
find $BACKUP_DIR -name "*.sql" -mtime +7 -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete
```

```bash
chmod +x /opt/plane/backup.sh

# Add to crontab for daily backups
crontab -e
# Add: 0 2 * * * /opt/plane/backup.sh
```

### 10.3 Update Procedure
```bash
# Create update script
nano /opt/plane/update.sh
```

```bash
#!/bin/bash
cd /opt/plane

# Pull latest code
git pull origin main

# Rebuild and restart services
docker-compose -f docker-compose.prod.yml down
docker-compose -f docker-compose.prod.yml build
docker-compose -f docker-compose.prod.yml up -d

# Check health
sleep 30
docker-compose -f docker-compose.prod.yml ps
```

## Step 11: Security Hardening

### 11.1 Firewall Configuration
```bash
# Allow only necessary ports
sudo ufw delete allow 22
sudo ufw limit 22/tcp  # Rate limit SSH
sudo ufw allow from trusted-ip to any port 22  # Restrict SSH to specific IPs
```

### 11.2 Regular Updates
```bash
# Create auto-update script
nano /opt/plane/security-updates.sh
```

```bash
#!/bin/bash
# System updates
sudo apt update && sudo apt upgrade -y

# Docker updates
sudo docker system prune -f

# Restart services
sudo systemctl restart plane
```

## Step 12: Testing and Validation

### 12.1 Health Checks
```bash
# Test all endpoints
curl -f http://your-domain.com/api/health/ || echo "API unhealthy"
curl -f http://your-domain.com/ || echo "Web app unhealthy"
curl -f http://your-domain.com/admin/ || echo "Admin unhealthy"
curl -f http://your-domain.com/space/ || echo "Space unhealthy"
```

### 12.2 Performance Testing
```bash
# Install Apache Bench for basic load testing
sudo apt install apache2-utils -y

# Test API performance
ab -n 100 -c 10 http://your-domain.com/api/health/
```

## Troubleshooting

### Common Issues:

1. **Services not starting**: Check logs with `docker-compose logs -f`
2. **Database connection issues**: Verify environment variables and network connectivity
3. **502 Bad Gateway**: Check if backend services are running and Nginx config is correct
4. **SSL issues**: Verify domain DNS settings and certificate installation
5. **Performance issues**: Monitor resource usage with `htop` and `docker stats`

### Useful Commands:

```bash
# Restart specific service
docker-compose -f docker-compose.prod.yml restart plane-api

# View resource usage
docker stats

# Clean up Docker
docker system prune -a

# View Nginx error logs
sudo tail -f /var/log/nginx/error.log

# Check service status
sudo systemctl status plane
```

## Post-Deployment Checklist

- [ ] All services are running
- [ ] SSL certificate is installed and working
- [ ] Database is accessible and migrations are applied
- [ ] File uploads are working (MinIO)
- [ ] Email notifications are configured (if needed)
- [ ] Backup system is in place
- [ ] Monitoring is set up
- [ ] Firewall is properly configured
- [ ] Domain DNS is pointing to server
- [ ] Performance testing is completed

## Maintenance Schedule

- **Daily**: Monitor logs and performance
- **Weekly**: Update system packages
- **Monthly**: Review backups and security updates
- **Quarterly**: Full security audit and performance optimization

Your Plane project is now successfully deployed on a VPS server with production-ready configuration!